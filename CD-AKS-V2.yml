name: CD-AKS
run-name: Deploy Any Environment

# Controls when the workflow will run
on:
  workflow_call:
    inputs:
      runner_name:
        type: string
        required: true
      service_name:
        type: string
        default: ''
        required: true
      service_version:
        type: string
        default: ''
        required: true
      environment:
        type: string
        default: ''
        required: true
      repository_name:
        type: string
        default: ''
        required: true
      repository_path:
        type: string
        default: ''
        required: true
      azure_service_principal:
        type: string
        default: ''
        required: true
      azure_cloud:
        type: string
        default: ''
        required: true
      keyvault_name:
        type: string
        default: ''
        required: true
      container_registry:
        type: string
        default: ''
        required: true
      image_name:
        type: string
        default: ''
        required: true
      cluster_name:
        type: string
        default: ''
        required: true
      cluster_resource_group:
        type: string
        default: ''
        required: true
      cluster_namespace:
        type: string
        default: ''
        required: true
      aks_secret_name:
        type: string
        default: ''
        required: true
      manifest_file:
        type: string
        default: ''
        required: true
      project_name:
        type: string
        default: ''
        required: true

  workflow_dispatch:

  # Environment variables available to all jobs and steps in this workflow
env:
  REGISTRY: ghcr.io

# A workflow run is made up of one or more jobs
jobs:
  aks-deploy:
    runs-on: ${{ inputs.runner_name }}
    permissions:
      actions: write
      checks: write
      contents: write
      deployments: write
      id-token: write
      issues: write
      discussions: read
      packages: read
      pages: read
      pull-requests: read
      repository-projects: write
      security-events: read
      statuses: read
    env:
      SERVICE_NAME: ${{ inputs.service_name }}
      SERVICE_VERSION: ${{ inputs.service_version }}
      ENVIRONMENT: ${{ inputs.environment }}
      REPO_NAME: ${{ inputs.repository_name }}
      GHCR_PATH: ${{ inputs.repository_path }}
      SERVICEPPAL: ${{ inputs.azure_service_principal }}
      AZURE_CLOUD: ${{ inputs.azure_cloud }}
      KEYVAULT_NAME: ${{ inputs.keyvault_name }}
      CONTAINER_REGISTRY: ${{ inputs.container_registry }}
      CONTAINER_NAME: ${{ inputs.image_name }}
      CLUSTER_NAME: ${{ inputs.cluster_name }}
      CLUSTER_RG: ${{ inputs.cluster_resource_group }}
      NAMESPACE: ${{ inputs.cluster_namespace }}
      AKS_SECRET_NAME: ${{ inputs.aks_secret_name }}
      MANIFEST_FILE_PATH: ${{ inputs.manifest_file }}
      PROJECT_NAME: ${{ inputs.project_name }}


    steps:
      - name: Clean up working directory
        uses: AutoModality/action-clean@v1
      - uses: actions/checkout@v2
        with:
          ref: deploy-once
          repository: revenue-solutions-inc/devops-cicd
          token: ${{ secrets.PAT }}
          path: cicd_files
      - name: Read deployment configuration
        run: |
          echo "BUILD_NUMBER=$(echo "$SERVICE_VERSION" | tr -d v)" >> $GITHUB_ENV
          
      - name: 'Login to GitHub Container Registry'
        uses: docker/login-action@v2
        with:
          registry: ${{ env.REGISTRY }}
          username: ${{github.actor}}
          password: ${{secrets.GITHUB_TOKEN}}

      - name: Login to Azure Cloud
        uses: Azure/login@v1
        if: ${{ env.AZURE_CLOUD == 'azurecloud' }}
        env:
          SERVICE_PRINCIPAL: ${{ secrets[format('{0}', env.SERVICEPPAL)] }}
        with:
          creds: ${{ env.SERVICE_PRINCIPAL }}

      - name: Login to Azure Government
        uses: Azure/login@v1
        if: ${{ env.AZURE_CLOUD == 'AzureUSGovernment' }}
        env:
          SERVICE_PRINCIPAL: ${{ secrets[format('{0}', env.SERVICEPPAL)] }}
        with:
          creds: ${{ env.SERVICE_PRINCIPAL }}
          environment: 'AzureUSGovernment'

      - name: Get ACR credentials from ${{ env.KEYVAULT_NAME }}
        uses: Azure/get-keyvault-secrets@v1
        with:
          keyvault: ${{ env.KEYVAULT_NAME }}
          secrets: 'ACR--USERNAME,ACR--PASSWORD'

        # Connect to Azure Container registry (ACR)
      - name: Login to ACR
        uses: azure/docker-login@v1
        with:
          login-server: ${{ env.CONTAINER_REGISTRY }}
          username: ${{ env.ACR--USERNAME }}
          password: ${{ env.ACR--PASSWORD }}

      - name: Push ${{env.GHCR_PATH}}:v${{env.BUILD_NUMBER}} to ACR
        run: |
          az acr import --name ${{ env.CONTAINER_REGISTRY }}/${{ env.CONTAINER_NAME }} --source ${{ env.REGISTRY }}/${{env.GHCR_PATH}}:v${{env.BUILD_NUMBER}} --image ${{ env.CONTAINER_NAME }}:v${{ env.BUILD_NUMBER }} --username nrehman-rsi --password ${{ secrets.GITHUB_TOKEN }} --force

      # Set the target Azure Kubernetes Service (AKS) cluster.
      - name: 'Set k8s context'
        uses: azure/aks-set-context@v1
        env:
          SERVICE_PRINCIPAL: ${{ secrets[format('{0}', env.SERVICEPPAL)] }}
        with:
          creds: ${{ env.SERVICE_PRINCIPAL }}
          cluster-name: ${{ env.CLUSTER_NAME }}
          resource-group: ${{ env.CLUSTER_RG }}
        id: login

    # Create image pull secret for ACR
      - name: 'Create imagePullSecret'
        uses: azure/k8s-create-secret@v1
        with:
            namespace: ${{ env.NAMESPACE }}
            container-registry-url: ${{ env.CONTAINER_REGISTRY }}
            container-registry-username: ${{ env.ACR--USERNAME }}
            container-registry-password: ${{ env.ACR--PASSWORD }}
            secret-name: ${{ env.AKS_SECRET_NAME }}

      # Deploy app to AKS with k8s manifests
      - name: 'Deploy v${{ env.BUILD_NUMBER }} to AKS'
        uses: azure/k8s-deploy@v1
        with:
          manifests: |
            ${{ github.workspace }}/cicd_files/deployment_files/${{ env.MANIFEST_FILE_PATH }}
          images: ${{ env.CONTAINER_REGISTRY }}/${{ env.CONTAINER_NAME }}:v${{ env.BUILD_NUMBER }}
          imagepullsecrets: ${{ env.AKS_SECRET_NAME }}
          namespace: ${{ env.NAMESPACE }}

      - name: Update the confluence
        uses: revenue-solutions-inc/confluence-rsi@v1
        with:
          service: ${{ env.PROJECT_NAME }}
          env: ${{ env.ENVIRONMENT }}
          version: ${{ env.BUILD_NUMBER }}
          token: ${{ secrets.CONFLUENCE_TOKEN }}
          connectionstring: ${{ secrets.COSMOS_CONNECTION_STRING }}

    
